import os

import pyspark
from packages.etl.etl_with_data_quality import ETLWithDataQuality
from pyspark.sql.functions import concat, md5, col


class FactCandidato(ETLWithDataQuality):
    partitions = []
    mode = "upsert"
    merge_logic = "t.NU_INSCRICAO = s.NU_INSCRICAO"
    update_logic = "t.ingestion_at <= s.ingestion_at"

    target_layer = "trusted"

    table_name = "fact_candidato"

    dataframe_view_name = "fact_candidato_df"

    primary_key = "NU_INSCRICAO"

    checks = f"""checks for {dataframe_view_name}:
- row_count > 0
- missing_count(NU_INSCRICAO) = 0
- duplicate_count(NU_INSCRICAO) = 0
- missing_count(NU_NOTA_CN) = 0
- invalid_count(NU_NOTA_CN) = 0:
    valid min: '0.0'
- invalid_count(NU_NOTA_CN) = 0:
    valid max: '1000'
- missing_count(NU_NOTA_CH) = 0
- invalid_count(NU_NOTA_CH) = 0:
    valid min: '0.0'
- invalid_count(NU_NOTA_CH) = 0:
    valid max: '1000'
- missing_count(NU_NOTA_LC) = 0
- invalid_count(NU_NOTA_LC) = 0:
    valid min: '0.0'
- invalid_count(NU_NOTA_LC) = 0:
    valid max: '1000'
- missing_count(NU_NOTA_MT) = 0
- invalid_count(NU_NOTA_MT) = 0:
    valid min: '0.0'
- invalid_count(NU_NOTA_MT) = 0:
    valid max: '1000'
- missing_count(NU_NOTA_COMP1) = 0
- invalid_count(NU_NOTA_COMP1) = 0:
    valid min: '0'
- invalid_count(NU_NOTA_COMP1) = 0:
    valid max: '200'
- missing_count(NU_NOTA_COMP2) = 0
- invalid_count(NU_NOTA_COMP2) = 0:
    valid min: '0'
- invalid_count(NU_NOTA_COMP2) = 0:
    valid max: '200'
- missing_count(NU_NOTA_COMP3) = 0
- invalid_count(NU_NOTA_COMP3) = 0:
    valid min: '0'
- invalid_count(NU_NOTA_COMP3) = 0:
    valid max: '200'
- missing_count(NU_NOTA_COMP4) = 0
- invalid_count(NU_NOTA_COMP4) = 0:
    valid min: '0'
- invalid_count(NU_NOTA_COMP4) = 0:
    valid max: '200'
- missing_count(NU_NOTA_COMP5) = 0
- invalid_count(NU_NOTA_COMP5) = 0:
    valid min: '0'
- invalid_count(NU_NOTA_COMP5) = 0:
    valid max: '200'
- missing_count(NU_NOTA_REDACAO) = 0
- invalid_count(NU_NOTA_REDACAO) = 0:
    valid min: '0'
- invalid_count(NU_NOTA_REDACAO) = 0:
    valid max: '1000'
- missing_count(TP_STATUS_REDACAO) = 0
- invalid_count(TP_STATUS_REDACAO) = 0:
    valid min: '1'
- invalid_count(TP_STATUS_REDACAO) = 0:
    valid max: '9'
- invalid_count(TP_STATUS_REDACAO) = 0:
    valid values: [4, 2, 1, 6, 3, 8, 9, 7]
- missing_count(CO_PROVA_CN) = 0
- invalid_count(CO_PROVA_CN) = 0:
    valid values: [ 503, 504, 505, 506, 519, 523, 543, 544, 545, 546, 507, 508, 509, 510, 520, 524, 547, 548, 549, 550, 564, 511, 512, 
 513, 514, 521, 525, 551, 552, 553, 554, 565, 515, 516, 517, 518, 522, 526, 555, 556, 557, 558, 597, 598, 599, 600, 
 601, 602, 604, 605, 677, 678, 679, 680, 684, 699, 700, 701, 702, 567, 568, 569, 570, 571, 572, 574, 575, 647, 648, 
 649, 650, 654, 687, 688, 689, 690, 577, 578, 579, 580, 581, 582, 584, 585, 657, 658, 659, 660, 664, 691, 692, 693, 
 694, 587, 588, 589, 590, 591, 592, 594, 595, 667, 668, 669, 670, 674, 695, 696, 697, 698, 909, 910, 911, 912, 915, 
 916, 917, 989, 990, 991, 992, 996, 1011, 1012, 1013, 1014, 1045, 1046, 1047, 1048, 1052, 879, 880, 881, 882, 885, 886,
 887, 959, 960, 961, 962, 966, 999, 1000, 1001, 1002, 1015, 1016, 1017, 1018, 1022, 889, 890, 891, 892, 895, 896, 897, 
 969, 970, 971, 972, 976, 1003, 1004, 1005, 1006, 1025, 1026, 1027, 1028, 1032, 899, 900, 901, 902, 905, 906, 907, 979, 
 980, 981, 982, 986, 1007, 1008, 1009, 1010, 1035, 1036, 1037, 1038, 1042, 1085, 1086, 1087, 1088, 1092, 1093, 1165, 
 1166, 1167, 1168, 1187, 1188, 1189, 1190, 1055, 1056, 1057, 1058, 1062, 1063, 1135, 1136, 1137, 1138, 1175, 1176, 
 1177, 1178, 1065, 1066, 1067, 1068, 1072, 1073, 1145, 1146, 1147, 1148, 1179, 1180, 1181, 1182, 1075, 1076, 1077, 
 1078, 1082, 1083, 1155, 1156, 1157, 1158, 1183, 1184, 1185, 1186]
- missing_count(CO_PROVA_CH) = 0
- invalid_count(CO_PROVA_CH) = 0:
    valid values: [ 503, 504, 505, 506, 519, 523, 543, 544, 545, 546, 507, 508, 509, 510, 520, 524, 547, 548, 549, 550, 564, 511, 512, 
 513, 514, 521, 525, 551, 552, 553, 554, 565, 515, 516, 517, 518, 522, 526, 555, 556, 557, 558, 597, 598, 599, 600, 
 601, 602, 604, 605, 677, 678, 679, 680, 684, 699, 700, 701, 702, 567, 568, 569, 570, 571, 572, 574, 575, 647, 648, 
 649, 650, 654, 687, 688, 689, 690, 577, 578, 579, 580, 581, 582, 584, 585, 657, 658, 659, 660, 664, 691, 692, 693, 
 694, 587, 588, 589, 590, 591, 592, 594, 595, 667, 668, 669, 670, 674, 695, 696, 697, 698, 909, 910, 911, 912, 915, 
 916, 917, 989, 990, 991, 992, 996, 1011, 1012, 1013, 1014, 1045, 1046, 1047, 1048, 1052, 879, 880, 881, 882, 885, 886,
 887, 959, 960, 961, 962, 966, 999, 1000, 1001, 1002, 1015, 1016, 1017, 1018, 1022, 889, 890, 891, 892, 895, 896, 897, 
 969, 970, 971, 972, 976, 1003, 1004, 1005, 1006, 1025, 1026, 1027, 1028, 1032, 899, 900, 901, 902, 905, 906, 907, 979, 
 980, 981, 982, 986, 1007, 1008, 1009, 1010, 1035, 1036, 1037, 1038, 1042, 1085, 1086, 1087, 1088, 1092, 1093, 1165, 
 1166, 1167, 1168, 1187, 1188, 1189, 1190, 1055, 1056, 1057, 1058, 1062, 1063, 1135, 1136, 1137, 1138, 1175, 1176, 
 1177, 1178, 1065, 1066, 1067, 1068, 1072, 1073, 1145, 1146, 1147, 1148, 1179, 1180, 1181, 1182, 1075, 1076, 1077, 
 1078, 1082, 1083, 1155, 1156, 1157, 1158, 1183, 1184, 1185, 1186]
- missing_count(CO_PROVA_LC) = 0
- invalid_count(CO_PROVA_LC) = 0:
    valid values: [ 503, 504, 505, 506, 519, 523, 543, 544, 545, 546, 507, 508, 509, 510, 520, 524, 547, 548, 549, 550, 564, 511, 512, 
 513, 514, 521, 525, 551, 552, 553, 554, 565, 515, 516, 517, 518, 522, 526, 555, 556, 557, 558, 597, 598, 599, 600, 
 601, 602, 604, 605, 677, 678, 679, 680, 684, 699, 700, 701, 702, 567, 568, 569, 570, 571, 572, 574, 575, 647, 648, 
 649, 650, 654, 687, 688, 689, 690, 577, 578, 579, 580, 581, 582, 584, 585, 657, 658, 659, 660, 664, 691, 692, 693, 
 694, 587, 588, 589, 590, 591, 592, 594, 595, 667, 668, 669, 670, 674, 695, 696, 697, 698, 909, 910, 911, 912, 915, 
 916, 917, 989, 990, 991, 992, 996, 1011, 1012, 1013, 1014, 1045, 1046, 1047, 1048, 1052, 879, 880, 881, 882, 885, 886,
 887, 959, 960, 961, 962, 966, 999, 1000, 1001, 1002, 1015, 1016, 1017, 1018, 1022, 889, 890, 891, 892, 895, 896, 897, 
 969, 970, 971, 972, 976, 1003, 1004, 1005, 1006, 1025, 1026, 1027, 1028, 1032, 899, 900, 901, 902, 905, 906, 907, 979, 
 980, 981, 982, 986, 1007, 1008, 1009, 1010, 1035, 1036, 1037, 1038, 1042, 1085, 1086, 1087, 1088, 1092, 1093, 1165, 
 1166, 1167, 1168, 1187, 1188, 1189, 1190, 1055, 1056, 1057, 1058, 1062, 1063, 1135, 1136, 1137, 1138, 1175, 1176, 
 1177, 1178, 1065, 1066, 1067, 1068, 1072, 1073, 1145, 1146, 1147, 1148, 1179, 1180, 1181, 1182, 1075, 1076, 1077, 
 1078, 1082, 1083, 1155, 1156, 1157, 1158, 1183, 1184, 1185, 1186]
- missing_count(CO_PROVA_MT) = 0
- invalid_count(CO_PROVA_MT) = 0:
    valid values: [ 503, 504, 505, 506, 519, 523, 543, 544, 545, 546, 507, 508, 509, 510, 520, 524, 547, 548, 549, 550, 564, 511, 512, 
 513, 514, 521, 525, 551, 552, 553, 554, 565, 515, 516, 517, 518, 522, 526, 555, 556, 557, 558, 597, 598, 599, 600, 
 601, 602, 604, 605, 677, 678, 679, 680, 684, 699, 700, 701, 702, 567, 568, 569, 570, 571, 572, 574, 575, 647, 648, 
 649, 650, 654, 687, 688, 689, 690, 577, 578, 579, 580, 581, 582, 584, 585, 657, 658, 659, 660, 664, 691, 692, 693, 
 694, 587, 588, 589, 590, 591, 592, 594, 595, 667, 668, 669, 670, 674, 695, 696, 697, 698, 909, 910, 911, 912, 915, 
 916, 917, 989, 990, 991, 992, 996, 1011, 1012, 1013, 1014, 1045, 1046, 1047, 1048, 1052, 879, 880, 881, 882, 885, 886,
 887, 959, 960, 961, 962, 966, 999, 1000, 1001, 1002, 1015, 1016, 1017, 1018, 1022, 889, 890, 891, 892, 895, 896, 897, 
 969, 970, 971, 972, 976, 1003, 1004, 1005, 1006, 1025, 1026, 1027, 1028, 1032, 899, 900, 901, 902, 905, 906, 907, 979, 
 980, 981, 982, 986, 1007, 1008, 1009, 1010, 1035, 1036, 1037, 1038, 1042, 1085, 1086, 1087, 1088, 1092, 1093, 1165, 
 1166, 1167, 1168, 1187, 1188, 1189, 1190, 1055, 1056, 1057, 1058, 1062, 1063, 1135, 1136, 1137, 1138, 1175, 1176, 
 1177, 1178, 1065, 1066, 1067, 1068, 1072, 1073, 1145, 1146, 1147, 1148, 1179, 1180, 1181, 1182, 1075, 1076, 1077, 
 1078, 1082, 1083, 1155, 1156, 1157, 1158, 1183, 1184, 1185, 1186]
 """

    post_check = None

    def data_transform_workflow(self) -> pyspark.sql.DataFrame:
        df = self.spark_session.read.format("delta").load(
            (os.path.join(os.getcwd(), "layers", "raw", "tables", "enem_microdados"))
        )
        df = df.selectExpr(
            "NU_INSCRICAO",
            "NU_NOTA_CN",
            "NU_NOTA_CH",
            "NU_NOTA_LC",
            "NU_NOTA_MT",
            "NU_NOTA_COMP1",
            "NU_NOTA_COMP2",
            "NU_NOTA_COMP3",
            "NU_NOTA_COMP4",
            "NU_NOTA_COMP5",
            "NU_NOTA_REDACAO",
            "TP_STATUS_REDACAO",
            "CO_PROVA_CN",
            "CO_PROVA_CH",
            "CO_PROVA_LC",
            "CO_PROVA_MT",
            "CO_MUNICIPIO_ESC",
            "NO_MUNICIPIO_ESC",
            "SG_UF_ESC",
            "TP_DEPENDENCIA_ADM_ESC",
            "TP_LOCALIZACAO_ESC",
            "TP_SIT_FUNC_ESC",
        )

        columns_to_md5 = [
            "CO_MUNICIPIO_ESC",
            "NO_MUNICIPIO_ESC",
            "SG_UF_ESC",
            "TP_DEPENDENCIA_ADM_ESC",
            "TP_LOCALIZACAO_ESC",
            "TP_SIT_FUNC_ESC",
        ]

        df = df.withColumn(
            "escola_id", md5(concat(*[col(coluna) for coluna in columns_to_md5]))
        )
        df = df.drop(
            "CO_MUNICIPIO_ESC",
            "NO_MUNICIPIO_ESC",
            "SG_UF_ESC",
            "TP_DEPENDENCIA_ADM_ESC",
            "TP_LOCALIZACAO_ESC",
            "TP_SIT_FUNC_ESC",
        )
        df = df.drop_duplicates()
        return df
